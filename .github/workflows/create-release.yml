name: Create a new release of the package

on:
  push:
    tags:
      - '*.*.*'

jobs:
    create-release:
        runs-on: ubuntu-20.04
        steps:
            - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
            - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
            - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
            - name: Check out repository code
              uses: actions/checkout@v2
            - name: Install Poetry
              uses: snok/install-poetry@v1.2.1
              with:
                version: 1.1.12
                virtualenvs-create: true
                virtualenvs-in-project: true
                installer-parallel: true
            - name: Build project for distribution
              run: poetry build --no-interaction --no-ansi -vv
            - name: Extract module version from poetry
              shell: bash
              run: echo "##[set-output name=version;]$(poetry version --short)"
              id: module_poetry
            - name: Extract module version from tag
              shell: bash
              run: echo "##[set-output name=version;]$(echo ${GITHUB_REF#refs/tags/})"
              id: module_tag
            - name: Check that module version from tag and poetry match
              env:
                  POETRY_VERSION: ${{ steps.module_poetry.outputs.version }}
                  TAG_VERSION: ${{ steps.module_tag.outputs.version }}
              run: |
                [[ v$POETRY_VERSION == $TAG_VERSION ]]
            - name: Check kind of version
              id: check-version
              run: |
                [[ "$(poetry version --short)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] \
                  || echo ::set-output name=prerelease::true
            - name: Create release
              uses: ncipollo/release-action@v1
              with:
                artifacts: "./imktk/dist/*"
                token: ${{ secrets.GITHUB_TOKEN }}
                draft: false
                prerelease: steps.check-version.outputs.prerelease == 'true'
            - name: Publish to PyPI
              env:
                POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI }}
              run: poetry publish --no-interaction --no-ansi -vv
            - name: Publish to Dockerhub
              shell: bash
              working-directory: ./cicd-workflows
              env:
                DOCKER_TAG: ${{ steps.module_poetry.outputs.version }}
                DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
                DOCKER_SECRET: ${{ secrets.DOCKER_SECRET }}
              run: ./build-and-push-docker-images.sh
